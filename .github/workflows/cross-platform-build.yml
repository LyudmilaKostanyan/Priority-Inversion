name: Cross platform build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, ubuntu-latest]
        build_type: [Debug]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          cmake -S . -B "$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        else
          cmake -S . -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        fi

    - name: Build
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          cmake --build "$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")" --config ${{ matrix.build_type }}
        else
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
        fi

    - name: Run test "Without priority inheritance" (Windows, 60s timeout)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "Running main with a 60-second timeout (without priority inheritance)..."
        $exePath = "${{ steps.strings.outputs.build-output-dir }}\Debug\main.exe"
        if (-Not (Test-Path $exePath)) {
          Write-Error "Executable not found at $exePath"
          exit 1
        }
        $process = Start-Process -FilePath "cmd.exe" -ArgumentList "/c start /wait /affinity 1 `"$exePath --no-inheritance`"" -NoNewWindow -PassThru
        $timeout = 60
        $elapsed = 0
        while (-not $process.HasExited -and $elapsed -lt $timeout) {
          Start-Sleep -Seconds 1
          $elapsed++
        }
        if (-not $process.HasExited) {
          Write-Warning "Process exceeded 60 seconds. Killing..."
          $process.Kill()
        }

    - name: Run test "Without priority inheritance" (Linux, 60s timeout)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        echo "Running main with a 60-second timeout (without priority inheritance)..."
        cd "${{ steps.strings.outputs.build-output-dir }}"
        timeout 60s sudo taskset -c 0 ./main --no-inheritance || echo "Test timed out or failed."

    - name: Run test "With priority inheritance"
      shell: bash
      run: |
        cd "${{ steps.strings.outputs.build-output-dir }}"
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          ./Debug/main.exe
        else
          sudo taskset -c 0 ./main
        fi
